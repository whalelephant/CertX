// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credentials/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredentialsPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*CredentialsPacketData_NoData
	//	*CredentialsPacketData_VerifiableCredentialPacket
	Packet isCredentialsPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *CredentialsPacketData) Reset()         { *m = CredentialsPacketData{} }
func (m *CredentialsPacketData) String() string { return proto.CompactTextString(m) }
func (*CredentialsPacketData) ProtoMessage()    {}
func (*CredentialsPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c987bb1f5bf35b, []int{0}
}
func (m *CredentialsPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialsPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialsPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialsPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsPacketData.Merge(m, src)
}
func (m *CredentialsPacketData) XXX_Size() int {
	return m.Size()
}
func (m *CredentialsPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsPacketData proto.InternalMessageInfo

type isCredentialsPacketData_Packet interface {
	isCredentialsPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CredentialsPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type CredentialsPacketData_VerifiableCredentialPacket struct {
	VerifiableCredentialPacket *VerifiableCredentialPacketData `protobuf:"bytes,2,opt,name=verifiableCredentialPacket,proto3,oneof" json:"verifiableCredentialPacket,omitempty"`
}

func (*CredentialsPacketData_NoData) isCredentialsPacketData_Packet()                     {}
func (*CredentialsPacketData_VerifiableCredentialPacket) isCredentialsPacketData_Packet() {}

func (m *CredentialsPacketData) GetPacket() isCredentialsPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *CredentialsPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*CredentialsPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *CredentialsPacketData) GetVerifiableCredentialPacket() *VerifiableCredentialPacketData {
	if x, ok := m.GetPacket().(*CredentialsPacketData_VerifiableCredentialPacket); ok {
		return x.VerifiableCredentialPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CredentialsPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CredentialsPacketData_NoData)(nil),
		(*CredentialsPacketData_VerifiableCredentialPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c987bb1f5bf35b, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// this line is used by starport scaffolding # ibc/packet/proto/message
// VerifiableCredentialPacketData defines a struct for the packet payload
type VerifiableCredentialPacketData struct {
	Subject   string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Verifier  string `protobuf:"bytes,2,opt,name=verifier,proto3" json:"verifier,omitempty"`
	Issuer    string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Claim     string `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VerifiableCredentialPacketData) Reset()         { *m = VerifiableCredentialPacketData{} }
func (m *VerifiableCredentialPacketData) String() string { return proto.CompactTextString(m) }
func (*VerifiableCredentialPacketData) ProtoMessage()    {}
func (*VerifiableCredentialPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c987bb1f5bf35b, []int{2}
}
func (m *VerifiableCredentialPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifiableCredentialPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifiableCredentialPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifiableCredentialPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifiableCredentialPacketData.Merge(m, src)
}
func (m *VerifiableCredentialPacketData) XXX_Size() int {
	return m.Size()
}
func (m *VerifiableCredentialPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifiableCredentialPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_VerifiableCredentialPacketData proto.InternalMessageInfo

func (m *VerifiableCredentialPacketData) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *VerifiableCredentialPacketData) GetVerifier() string {
	if m != nil {
		return m.Verifier
	}
	return ""
}

func (m *VerifiableCredentialPacketData) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *VerifiableCredentialPacketData) GetClaim() string {
	if m != nil {
		return m.Claim
	}
	return ""
}

func (m *VerifiableCredentialPacketData) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// VerifiableCredentialPacketAck defines a struct for the packet acknowledgment
type VerifiableCredentialPacketAck struct {
}

func (m *VerifiableCredentialPacketAck) Reset()         { *m = VerifiableCredentialPacketAck{} }
func (m *VerifiableCredentialPacketAck) String() string { return proto.CompactTextString(m) }
func (*VerifiableCredentialPacketAck) ProtoMessage()    {}
func (*VerifiableCredentialPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c987bb1f5bf35b, []int{3}
}
func (m *VerifiableCredentialPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifiableCredentialPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifiableCredentialPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifiableCredentialPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifiableCredentialPacketAck.Merge(m, src)
}
func (m *VerifiableCredentialPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *VerifiableCredentialPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifiableCredentialPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_VerifiableCredentialPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CredentialsPacketData)(nil), "whalelephant.certx.credentials.CredentialsPacketData")
	proto.RegisterType((*NoData)(nil), "whalelephant.certx.credentials.NoData")
	proto.RegisterType((*VerifiableCredentialPacketData)(nil), "whalelephant.certx.credentials.VerifiableCredentialPacketData")
	proto.RegisterType((*VerifiableCredentialPacketAck)(nil), "whalelephant.certx.credentials.VerifiableCredentialPacketAck")
}

func init() { proto.RegisterFile("credentials/packet.proto", fileDescriptor_57c987bb1f5bf35b) }

var fileDescriptor_57c987bb1f5bf35b = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x8e, 0x81, 0x86, 0xf6, 0xd8, 0x2c, 0x40, 0x56, 0x05, 0x06, 0x65, 0x40, 0x4c, 0x89, 0x80,
	0x1d, 0x41, 0x61, 0x40, 0x42, 0x42, 0xa8, 0x03, 0x42, 0x6c, 0x8e, 0x39, 0x5a, 0xd3, 0x34, 0x89,
	0x6c, 0x07, 0xca, 0xc6, 0x23, 0xf0, 0x0c, 0x3c, 0x0d, 0x63, 0x47, 0x46, 0xd4, 0x4a, 0x3c, 0x07,
	0xaa, 0x53, 0x68, 0x97, 0x86, 0xed, 0xbe, 0xfb, 0xf9, 0xbe, 0xbb, 0x4f, 0x07, 0x4c, 0x6a, 0xbc,
	0xc7, 0xd4, 0x2a, 0x91, 0x98, 0x28, 0x17, 0xb2, 0x87, 0x36, 0xcc, 0x75, 0x66, 0x33, 0xca, 0x9f,
	0xbb, 0x22, 0xc1, 0x04, 0xf3, 0xae, 0x48, 0x6d, 0x28, 0x51, 0xdb, 0x41, 0x38, 0xd7, 0x1c, 0x7c,
	0x13, 0xd8, 0x38, 0x9b, 0xe1, 0x6b, 0x37, 0x7b, 0x2e, 0xac, 0xa0, 0x27, 0xe0, 0xa7, 0xd9, 0x24,
	0x62, 0x64, 0x97, 0xec, 0xaf, 0x1d, 0xee, 0x85, 0xd5, 0x54, 0xe1, 0x95, 0xeb, 0xbe, 0xf0, 0xda,
	0xd3, 0x39, 0xfa, 0x4a, 0xa0, 0xf9, 0x84, 0x5a, 0x3d, 0x28, 0x11, 0x27, 0x38, 0x53, 0x29, 0x45,
	0xd8, 0x92, 0xa3, 0x3d, 0xfe, 0x8f, 0xf6, 0x66, 0x21, 0xc3, 0x54, 0xae, 0x42, 0xa3, 0x55, 0x07,
	0xbf, 0xb4, 0x23, 0xa8, 0x83, 0x5f, 0x2e, 0x18, 0xbc, 0x13, 0xe0, 0xd5, 0xa4, 0x94, 0xc1, 0xaa,
	0x29, 0xe2, 0x47, 0x94, 0xd6, 0x1d, 0xdf, 0x68, 0xff, 0x42, 0xda, 0x84, 0x7a, 0x29, 0x87, 0xda,
	0x1d, 0xd0, 0x68, 0xff, 0x61, 0xba, 0x09, 0xbe, 0x32, 0xa6, 0x40, 0xcd, 0x96, 0x5d, 0x65, 0x8a,
	0xe8, 0x3a, 0xd4, 0x64, 0x22, 0x54, 0x9f, 0xad, 0xb8, 0x74, 0x09, 0xe8, 0x16, 0x34, 0x8c, 0xea,
	0xa4, 0xc2, 0x16, 0x1a, 0x59, 0xcd, 0x55, 0x66, 0x89, 0x60, 0x07, 0xb6, 0x17, 0xef, 0x78, 0x2a,
	0x7b, 0xad, 0xcb, 0x8f, 0x11, 0x27, 0xc3, 0x11, 0x27, 0x5f, 0x23, 0x4e, 0xde, 0xc6, 0xdc, 0x1b,
	0x8e, 0xb9, 0xf7, 0x39, 0xe6, 0xde, 0xdd, 0x41, 0x47, 0xd9, 0x6e, 0x11, 0x87, 0x32, 0xeb, 0x47,
	0xf3, 0xde, 0x46, 0x13, 0x6f, 0x6f, 0xa3, 0x41, 0x34, 0xff, 0x2c, 0xf6, 0x25, 0x47, 0x13, 0xfb,
	0xee, 0x59, 0x8e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x53, 0x49, 0xfd, 0x48, 0x02, 0x00,
	0x00,
}

func (m *CredentialsPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CredentialsPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CredentialsPacketData_VerifiableCredentialPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsPacketData_VerifiableCredentialPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VerifiableCredentialPacket != nil {
		{
			size, err := m.VerifiableCredentialPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VerifiableCredentialPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifiableCredentialPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredentialPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Claim) > 0 {
		i -= len(m.Claim)
		copy(dAtA[i:], m.Claim)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Claim)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Verifier) > 0 {
		i -= len(m.Verifier)
		copy(dAtA[i:], m.Verifier)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Verifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifiableCredentialPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifiableCredentialPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredentialPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialsPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *CredentialsPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CredentialsPacketData_VerifiableCredentialPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifiableCredentialPacket != nil {
		l = m.VerifiableCredentialPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VerifiableCredentialPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Verifier)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Claim)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *VerifiableCredentialPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredentialsPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CredentialsPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiableCredentialPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VerifiableCredentialPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CredentialsPacketData_VerifiableCredentialPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifiableCredentialPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifiableCredentialPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifiableCredentialPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifiableCredentialPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifiableCredentialPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifiableCredentialPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
